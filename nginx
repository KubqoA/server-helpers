#!/bin/bash
set -e

MAIL="mail@example.com"

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

command -v nginx >/dev/null 2>&1 || { echo >&2 "To use this script you need to have nginx installed."; exit 1; }

ssl () {
    command -v certbot >/dev/null 2>&1 || { echo >&2 "Before generating letsencrypt certificates, please install certbot. https://certbot.eff.org"; exit 1; }
    if [[ ! -f /etc/default/nginx_ssl_temporary ]] ; then
        echo "Nginx configuration '/etc/default/nginx_ssl_temporary' is not there."
        echo "If this is your first time running this script run '$0 install'."
        echo "This will generate all the files you need, in order to use this script."
        exit 1
    fi
    echo "Copying temporary configuration for ACME challenge."
    cp /etc/default/nginx_ssl_temporary /etc/nginx/sites-available/$1
    sed -i "s/www.example.com/$1/g" /etc/nginx/sites-available/$1
    ln -sf /etc/nginx/sites-available/$1 /etc/nginx/sites-enabled/
    mkdir -p /srv/www/$1/public_html
    mkdir -p /srv/www/$1/logs
    chown -R www-data:www-data /srv/www/$1
    nginx -t
    /etc/init.d/nginx reload
    echo "Getting certificate"
    certbot certonly --webroot -w /srv/www/$1/public_html/ -m $MAIL --agree-tos
    /etc/letsencrypt/get-ocsp.sh $1
    (crontab -l ; echo "6 * * * * /etc/letsencrypt/get-ocsp.sh $1") | crontab -
    rm /etc/nginx/sites-available/$1
    rm /etc/nginx/sites-enabled/$1
}

sslconf () {
    if [[ ! -f /etc/default/nginx_ssl ]] ; then
        echo "Nginx configuration '/etc/default/nginx_ssl_temporary' is not there."
        echo "If this is your first time running this script run '$0 install'."
        echo "This will generate all the files you need, in order to use this script."
        exit 1
    fi
    echo "Copying configuration for SSL host"
    cp /etc/default/nginx_ssl /etc/nginx/sites-available/$1
    ln -s /etc/nginx/sites-available/$1 /etc/nginx/sites-enabled/$1
    sed -i "s/www.example.com/$1/g" /etc/nginx/sites-available/$1
    echo "Getting Public Key Pin out of ssl certificate"
    openssl x509 -noout -in /etc/letsencrypt/live/$1/fullchain.pem -pubkey | openssl asn1parse -noout -inform pem -out /tmp/$1-public.key;
    OUTPUT="$(openssl dgst -sha256 -binary /tmp/$1-public.key | openssl enc -base64)"
    OUTPUT="$(echo ${OUTPUT//\//\\/})"
    rm /tmp/$1-public.key
    sed -i "s/examplePin/$OUTPUT/g" /etc/nginx/sites-available/$1
    nginx -t
    /etc/init.d/nginx reload
}

structure () {
    if [[ ! -f /etc/default/index.html ]] ; then
        echo "Nginx configuration '/etc/default/nginx_ssl_temporary' is not there."
        echo "If this is your first time running this script run '$0 install'."
        echo "This will generate all the files you need, in order to use this script."
        exit 1
    fi
    OUTPUT="$(curl -s https://api.github.com/repos/twbs/bootstrap/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)"
    wget $OUTPUT -O /srv/www/$1/public_html/bootstrap.zip -q
    unzip -q /srv/www/$1/public_html/bootstrap.zip -d /srv/www/$1/public_html/
    rm /srv/www/$1/public_html/bootstrap.zip
    OUTPUT="$(find /srv/www/$1/public_html/ -maxdepth 1 -mindepth 1 -type d | grep bootstrap)"
    mv $OUTPUT/* /srv/www/$1/public_html/
    rm -R $OUTPUT
    cp /etc/default/index.html /srv/www/$1/public_html/
    sed -i "s/www.example.com/$1/g" /srv/www/$1/public_html/index.html
}

new () {
    ssl $1
    sslconf $1
    structure $1
    echo "Done!"
}

removeSSL () {
    certbot revoke -d $1 --cert-path /etc/letsencrypt/live/$1/cert.pem
    rm -R /etc/letsencrypt/live/$1
    rm -R /etc/letsencrypt/archive/$1
    rm /etc/letsencrypt/renewal/$1.conf
    crontab -l | grep -v '/etc/letsencrypt/get-ocsp.sh $1'  | crontab -
}

removeConf () {
    rm /etc/nginx/sites-available/$1
    rm /etc/nginx/sites-enabled/$1
    nginx -t
    service nginx reload
}

removeDirectory () {
    rm -R /srv/www/$1
}

removeWhole () {
    removeSSL $1
    removeConf $1
    removeDirectory $1
}

if [ -z "$1" ]
then
    echo "No subcommand was specified."
    echo "Type '$0 help' for available subcommands."
    exit 0
fi
if [ "$1" == "help" ]
then
    echo "Nginx manager v1.0

Usage: $0 [generate|remove|install] [?] [?]

$0 generate [new|ssl|sslconf|structure] [domain]
$0 remove [whole|ssl|conf|directory] [domain]
$0 install"
elif [ "$1" == "generate" ]
then
    if [ -z "$2" ]
    then
        echo "You must specify what you want to generate."
        echo "Type '$0 help $1' for more info."
        exit 1;
    fi
    if [ "$2" == "new" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to generate new ssl certificate, nginx configuration and basic layout."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        new $3
    elif [ "$2" == "ssl" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to generate new ssl certificate."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        ssl $3
        echo "Done!"
    elif [ "$2" == "sslconf" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to generate new nginx configuration."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        sslconf $3
        echo "Done!"
    elif [ "$2" == "structure" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to generate new basic layout."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        structure $3
        echo "Done!"
    else
        echo "You cannot generate '$2'!"
        echo "Type '$0 help $1' for more info."
        exit 1;
    fi
elif [ "$1" == "remove" ]
then
    if [ -z "$2" ]
    then
        echo "You must specify what you want to remove."
        echo "Type '$0 help $1' for more info."
        exit 1;
    fi
    if [ "$2" == "ssl" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to remove ssl certificate."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        removeSSL $3
    elif [ "$2" == "conf" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to remove nginx configuration"
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        removeConf $3
    elif [ "$2" == "directory" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to remove server root."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        removeDirectory $3
    elif [ "$2" == "whole" ]
    then
        if [ -z "$3" ]
        then
            echo "You must specify the domain for which you want to remove ssl certificate, nginx configuration and server root."
            echo "Type '$0 help $1' for more info."
            exit 1;
        fi
        removeWhole $3
    else
        echo "You cannot remove '$2'!"
        echo "Type '$0 help $1' for more info."
        exit 1;
    fi
elif [ "$1" == "install" ]
then
    mkdir -p /srv/www
    echo "Generating configuration file '/etc/default/nginx_ssl_temporary'"
    echo "server {
        listen 80;
        listen [::]:80;
        server_name www.example.com;
	root /srv/www/www.example.com/public_html;
	index index.html index.htm;
}" >/etc/default/nginx_ssl_temporary
    echo "Generating configuration file '/etc/default/nginx_ssl'"
    echo "##SERVER BLOCK TO REDIRECT HHTP TRAFIC TO HTTPS
server {
        listen 80;
        listen [::]:80;
        server_name www.example.com;
        return 301 https://\$host\$request_uri;
}

##HTTPS SERVER BLOCK
server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        root /srv/www/www.example.com/public_html;

        access_log /srv/www/www.example.com/logs/access.log;
        error_log  /srv/www/www.example.com/logs/error.log;

        index index.php index.html index.htm;

        server_name www.example.com;

        ssl_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.example.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem;
        ssl_stapling_file /etc/letsencrypt/live/www.example.com/ocsp.resp;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4\";
	ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7
        resolver 8.8.8.8 8.8.8.4 valid=300s;
        resolver_timeout 5s;
        add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
	add_header Public-Key-Pins 'pin-sha256=\"examplePin\"; max-age=2592000; includeSubDomains';

        location / {
                try_files \$uri \$uri/ =404;
                include /etc/nginx/naxsi.rules;
        }

        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        }

        location ~ /\.ht {
                deny all;
        }
}" >/etc/default/nginx_ssl
    echo "Generating configuration file '/etc/default/index.html'"
    echo "<!DOCTYPE html>
<html lang=\"en\">
  <head>
    <meta charset=\"utf-8\">
    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Bootstrap 101 Template</title>

    <!-- Bootstrap -->
    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
    <![endif]-->
  </head>
  <body>
    <h1>www.example.com</h1>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src=\"js/bootstrap.min.js\"></script>
  </body>
</html>" >/etc/default/index.html
else
    echo "Subcommand '$1' is unknown"
    echo "Type '$0 help' for available subcommands."
    exit 0
fi

exit 0
